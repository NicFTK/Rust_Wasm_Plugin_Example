// Generated by `wit-bindgen` 0.42.1. DO NOT EDIT!
// Options used:
#[allow(dead_code, clippy::all)]
pub mod local {
  pub mod val {

    #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      // use wasmtime::component::ComponentType;

    use wasmtime::component::{self, ComponentType};

    use super::super::super::_rt;
      #[derive(Clone)]
      #[derive(ComponentType)] 
      #[component(record)] // 这里加上参数
      pub struct Decimal {
        pub prec: u32,
        pub scale: i32,
        pub value: _rt::String,
      }
      impl ::core::fmt::Debug for Decimal {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Decimal").field("prec", &self.prec).field("scale", &self.scale).field("value", &self.value).finish()
        }
      }
      #[derive(Clone)]
      #[derive(ComponentType)] 
      #[component(variant)] // 这里加上参数:eunm每个分支不能有数据
      pub enum Val {
        Null,
        Blob(_rt::Vec::<u8>),
        Boolen(bool),
        Str(_rt::String),
        Float(f64),
        Int(i64),
        Decimal(Decimal),
        Date(i32),
        Datetime(i64),
        Time(i64),
        Error(_rt::String),
      }
      impl ::core::fmt::Debug for Val {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Val::Null => {
              f.debug_tuple("Val::Null").finish()
            }
            Val::Blob(e) => {
              f.debug_tuple("Val::Blob").field(e).finish()
            }
            Val::Boolen(e) => {
              f.debug_tuple("Val::Boolen").field(e).finish()
            }
            Val::Str(e) => {
              f.debug_tuple("Val::Str").field(e).finish()
            }
            Val::Float(e) => {
              f.debug_tuple("Val::Float").field(e).finish()
            }
            Val::Int(e) => {
              f.debug_tuple("Val::Int").field(e).finish()
            }
            Val::Decimal(e) => {
              f.debug_tuple("Val::Decimal").field(e).finish()
            }
            Val::Date(e) => {
              f.debug_tuple("Val::Date").field(e).finish()
            }
            Val::Datetime(e) => {
              f.debug_tuple("Val::Datetime").field(e).finish()
            }
            Val::Time(e) => {
              f.debug_tuple("Val::Time").field(e).finish()
            }
            Val::Error(e) => {
              f.debug_tuple("Val::Error").field(e).finish()
            }
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      #[allow(async_fn_in_trait)]
      pub fn get_map() -> _rt::Vec::<(_rt::String,Val,)>{
        unsafe {

          #[cfg_attr(target_pointer_width="64", repr(align(8)))]
          #[cfg_attr(target_pointer_width="32", repr(align(4)))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 2*::core::mem::size_of::<*const u8>()]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2*::core::mem::size_of::<*const u8>()]);
          let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "local:val/types@1.0.0")]
          unsafe extern "C" {
            #[link_name = "get-map"]
            fn wit_import1(_: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          unsafe extern "C" fn wit_import1(_: *mut u8, ){ unreachable!() }
          wit_import1(ptr0);
          let l2 = *ptr0.add(0).cast::<*mut u8>();
          let l3 = *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
          let base29 = l2;
          let len29 = l3;
          let mut result29 = _rt::Vec::with_capacity(len29);
          for i in 0..len29 {
            let base = base29.add(i * (16+4*::core::mem::size_of::<*const u8>()));
            let e29 = {
              let l4 = *base.add(0).cast::<*mut u8>();
              let l5 = *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
              let len6 = l5;
              let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
              let l7 = i32::from(*base.add(2*::core::mem::size_of::<*const u8>()).cast::<u8>());
              let v28 = match l7 {
                0 => {
                  Val::Null
                }
                1 => {
                  let e28 = {
                    let l8 = *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                    let l9 = *base.add(8+3*::core::mem::size_of::<*const u8>()).cast::<usize>();
                    let len10 = l9;

                    _rt::Vec::from_raw_parts(l8.cast(), len10, len10)
                  };
                  Val::Blob(e28)
                }
                2 => {
                  let e28 = {
                    let l11 = i32::from(*base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<u8>());

                    _rt::bool_lift(l11 as u8)
                  };
                  Val::Boolen(e28)
                }
                3 => {
                  let e28 = {
                    let l12 = *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                    let l13 = *base.add(8+3*::core::mem::size_of::<*const u8>()).cast::<usize>();
                    let len14 = l13;
                    let bytes14 = _rt::Vec::from_raw_parts(l12.cast(), len14, len14);

                    _rt::string_lift(bytes14)
                  };
                  Val::Str(e28)
                }
                4 => {
                  let e28 = {
                    let l15 = *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<f64>();

                    l15
                  };
                  Val::Float(e28)
                }
                5 => {
                  let e28 = {
                    let l16 = *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<i64>();

                    l16
                  };
                  Val::Int(e28)
                }
                6 => {
                  let e28 = {
                    let l17 = *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<i32>();
                    let l18 = *base.add(12+2*::core::mem::size_of::<*const u8>()).cast::<i32>();
                    let l19 = *base.add(16+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                    let l20 = *base.add(16+3*::core::mem::size_of::<*const u8>()).cast::<usize>();
                    let len21 = l20;
                    let bytes21 = _rt::Vec::from_raw_parts(l19.cast(), len21, len21);

                    Decimal{
                      prec: l17 as u32,
                      scale: l18,
                      value: _rt::string_lift(bytes21),
                    }
                  };
                  Val::Decimal(e28)
                }
                7 => {
                  let e28 = {
                    let l22 = *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<i32>();

                    l22
                  };
                  Val::Date(e28)
                }
                8 => {
                  let e28 = {
                    let l23 = *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<i64>();

                    l23
                  };
                  Val::Datetime(e28)
                }
                9 => {
                  let e28 = {
                    let l24 = *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<i64>();

                    l24
                  };
                  Val::Time(e28)
                }
                n => {
                  debug_assert_eq!(n, 10, "invalid enum discriminant");
                  let e28 = {
                    let l25 = *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                    let l26 = *base.add(8+3*::core::mem::size_of::<*const u8>()).cast::<usize>();
                    let len27 = l26;
                    let bytes27 = _rt::Vec::from_raw_parts(l25.cast(), len27, len27);

                    _rt::string_lift(bytes27)
                  };
                  Val::Error(e28)
                }
              };

              (_rt::string_lift(bytes6), v28)
            };
            result29.push(e29);
          }
          _rt::cabi_dealloc(base29, len29 * (16+4*::core::mem::size_of::<*const u8>()), 8);
          let result30 = result29;
          result30
        }
      }

    }

  }
}
#[allow(dead_code, clippy::all)]
pub mod exports {
  pub mod local {
    pub mod val {

      #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
      pub mod types {
        #[used]
        #[doc(hidden)]
        static __FORCE_SECTION_REF: fn() =
        super::super::super::super::__link_custom_section_describing_imports;
        
        use super::super::super::super::_rt;

      #[derive(Clone)]
      #[derive(ComponentType)] 
      #[component(record)] // 这里加上参数
        pub struct Decimal {
          pub prec: u32,
          pub scale: i32,
          pub value: _rt::String,
        }
        impl ::core::fmt::Debug for Decimal {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Decimal").field("prec", &self.prec).field("scale", &self.scale).field("value", &self.value).finish()
          }
        }

      #[derive(Clone)]
      #[derive(ComponentType)] 
      #[component(variant)] // 这里加上参数:eunm每个分支不能有数据
        pub enum Val {
          Null,
          Blob(_rt::Vec::<u8>),
          Boolen(bool),
          Str(_rt::String),
          Float(f64),
          Int(i64),
          Decimal(Decimal),
          Date(i32),
          Datetime(i64),
          Time(i64),
          Error(_rt::String),
        }
        impl ::core::fmt::Debug for Val {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              Val::Null => {
                f.debug_tuple("Val::Null").finish()
              }
              Val::Blob(e) => {
                f.debug_tuple("Val::Blob").field(e).finish()
              }
              Val::Boolen(e) => {
                f.debug_tuple("Val::Boolen").field(e).finish()
              }
              Val::Str(e) => {
                f.debug_tuple("Val::Str").field(e).finish()
              }
              Val::Float(e) => {
                f.debug_tuple("Val::Float").field(e).finish()
              }
              Val::Int(e) => {
                f.debug_tuple("Val::Int").field(e).finish()
              }
              Val::Decimal(e) => {
                f.debug_tuple("Val::Decimal").field(e).finish()
              }
              Val::Date(e) => {
                f.debug_tuple("Val::Date").field(e).finish()
              }
              Val::Datetime(e) => {
                f.debug_tuple("Val::Datetime").field(e).finish()
              }
              Val::Time(e) => {
                f.debug_tuple("Val::Time").field(e).finish()
              }
              Val::Error(e) => {
                f.debug_tuple("Val::Error").field(e).finish()
              }
            }
          }
        }
        #[doc(hidden)]
        #[allow(non_snake_case, unused_unsafe)]
        pub unsafe fn _export_get_map_cabi<T: Guest>() -> *mut u8 { unsafe {#[cfg(target_arch="wasm32")]
        _rt::run_ctors_once();let result0 = {
          T::get_map()
        };
        let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
        let vec9 = result0;
        let len9 = vec9.len();
        let layout9 = _rt::alloc::Layout::from_size_align(vec9.len() * (16+4*::core::mem::size_of::<*const u8>()), 8).unwrap();
        let (result9, _cleanup9) = wit_bindgen::rt::Cleanup::new(layout9);if let Some(cleanup) = _cleanup9 { cleanup.forget(); }
        for (i, e) in vec9.into_iter().enumerate() {
          let base = result9.add(i * (16+4*::core::mem::size_of::<*const u8>()));
          {
            let (t2_0, t2_1, ) = e;
            let vec3 = (t2_0.into_bytes()).into_boxed_slice();
            let ptr3 = vec3.as_ptr().cast::<u8>();
            let len3 = vec3.len();
            ::core::mem::forget(vec3);
            *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
            match t2_1 {
              Val::Null=> {
                {
                  *base.add(2*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
                }
              }
              Val::Blob(e) => {
                *base.add(2*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
                let vec4 = (e).into_boxed_slice();
                let ptr4 = vec4.as_ptr().cast::<u8>();
                let len4 = vec4.len();
                ::core::mem::forget(vec4);
                *base.add(8+3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
                *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr4.cast_mut();
              },
              Val::Boolen(e) => {
                *base.add(2*::core::mem::size_of::<*const u8>()).cast::<u8>() = (2i32) as u8;
                *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<u8>() = (match e { true => 1, false => 0 }) as u8;
              },
              Val::Str(e) => {
                *base.add(2*::core::mem::size_of::<*const u8>()).cast::<u8>() = (3i32) as u8;
                let vec5 = (e.into_bytes()).into_boxed_slice();
                let ptr5 = vec5.as_ptr().cast::<u8>();
                let len5 = vec5.len();
                ::core::mem::forget(vec5);
                *base.add(8+3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
                *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr5.cast_mut();
              },
              Val::Float(e) => {
                *base.add(2*::core::mem::size_of::<*const u8>()).cast::<u8>() = (4i32) as u8;
                *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<f64>() = _rt::as_f64(e);
              },
              Val::Int(e) => {
                *base.add(2*::core::mem::size_of::<*const u8>()).cast::<u8>() = (5i32) as u8;
                *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(e);
              },
              Val::Decimal(e) => {
                *base.add(2*::core::mem::size_of::<*const u8>()).cast::<u8>() = (6i32) as u8;
                let Decimal{ prec:prec6, scale:scale6, value:value6, } = e;
                *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<i32>() = _rt::as_i32(prec6);
                *base.add(12+2*::core::mem::size_of::<*const u8>()).cast::<i32>() = _rt::as_i32(scale6);
                let vec7 = (value6.into_bytes()).into_boxed_slice();
                let ptr7 = vec7.as_ptr().cast::<u8>();
                let len7 = vec7.len();
                ::core::mem::forget(vec7);
                *base.add(16+3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len7;
                *base.add(16+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr7.cast_mut();
              },
              Val::Date(e) => {
                *base.add(2*::core::mem::size_of::<*const u8>()).cast::<u8>() = (7i32) as u8;
                *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<i32>() = _rt::as_i32(e);
              },
              Val::Datetime(e) => {
                *base.add(2*::core::mem::size_of::<*const u8>()).cast::<u8>() = (8i32) as u8;
                *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(e);
              },
              Val::Time(e) => {
                *base.add(2*::core::mem::size_of::<*const u8>()).cast::<u8>() = (9i32) as u8;
                *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(e);
              },
              Val::Error(e) => {
                *base.add(2*::core::mem::size_of::<*const u8>()).cast::<u8>() = (10i32) as u8;
                let vec8 = (e.into_bytes()).into_boxed_slice();
                let ptr8 = vec8.as_ptr().cast::<u8>();
                let len8 = vec8.len();
                ::core::mem::forget(vec8);
                *base.add(8+3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len8;
                *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr8.cast_mut();
              },
            }
          }
        }
        *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len9;
        *ptr1.add(0).cast::<*mut u8>() = result9;
        ptr1
      } }
      #[doc(hidden)]
      #[allow(non_snake_case)]
      pub unsafe fn __post_return_get_map<T: Guest>(arg0: *mut u8,) { unsafe {
        let l0 = *arg0.add(0).cast::<*mut u8>();
        let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
        let base14 = l0;
        let len14 = l1;
        for i in 0..len14 {
          let base = base14.add(i * (16+4*::core::mem::size_of::<*const u8>()));
          {
            let l2 = *base.add(0).cast::<*mut u8>();
            let l3 = *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l2, l3, 1);
            let l4 = i32::from(*base.add(2*::core::mem::size_of::<*const u8>()).cast::<u8>());
            match l4 {
              0 => (),
              1 => {
                let l5 = *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                let l6 = *base.add(8+3*::core::mem::size_of::<*const u8>()).cast::<usize>();
                let base7 = l5;
                let len7 = l6;
                _rt::cabi_dealloc(base7, len7 * 1, 1);
              },
              2 => (),
              3 => {
                let l8 = *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                let l9 = *base.add(8+3*::core::mem::size_of::<*const u8>()).cast::<usize>();
                _rt::cabi_dealloc(l8, l9, 1);
              },
              4 => (),
              5 => (),
              6 => {
                let l10 = *base.add(16+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                let l11 = *base.add(16+3*::core::mem::size_of::<*const u8>()).cast::<usize>();
                _rt::cabi_dealloc(l10, l11, 1);
              },
              7 => (),
              8 => (),
              9 => (),
              _ => {
                let l12 = *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                let l13 = *base.add(8+3*::core::mem::size_of::<*const u8>()).cast::<usize>();
                _rt::cabi_dealloc(l12, l13, 1);
              },
            }
          }
        }
        _rt::cabi_dealloc(base14, len14 * (16+4*::core::mem::size_of::<*const u8>()), 8);
      } }
      pub trait Guest {
        #[allow(async_fn_in_trait)]
        fn get_map() -> _rt::Vec::<(_rt::String,Val,)>;
      }
      #[doc(hidden)]

      macro_rules! __export_local_val_types_1_0_0_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[unsafe(export_name = "local:val/types@1.0.0#get-map")]
          unsafe extern "C" fn export_get_map() -> *mut u8 {
            unsafe { $($path_to_types)*::_export_get_map_cabi::<$ty>() }
          }
          #[unsafe(export_name = "cabi_post_local:val/types@1.0.0#get-map")]
          unsafe extern "C" fn _post_return_get_map(arg0: *mut u8,) {
            unsafe { $($path_to_types)*::__post_return_get_map::<$ty>(arg0) }
          }
        };);
      }
      #[doc(hidden)]
      pub(crate) use __export_local_val_types_1_0_0_cabi;
    use wasmtime::component::{self, ComponentType};

      #[cfg_attr(target_pointer_width="64", repr(align(8)))]
      #[cfg_attr(target_pointer_width="32", repr(align(4)))]
      struct _RetArea([::core::mem::MaybeUninit::<u8>; 2*::core::mem::size_of::<*const u8>()]);
      static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 2*::core::mem::size_of::<*const u8>()]);

    }

  }
}
}
mod _rt {
  #![allow(dead_code, clippy::all)]
  pub use alloc_crate::string::String;
  pub use alloc_crate::vec::Vec;
  pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
    if cfg!(debug_assertions) {
      String::from_utf8(bytes).unwrap()
    } else {
      unsafe { String::from_utf8_unchecked(bytes) }
    }
  }
  pub unsafe fn bool_lift(val: u8) -> bool {
    if cfg!(debug_assertions) {
      match val {
        0 => false,
        1 => true,
        _ => panic!("invalid bool discriminant"),
      }
    } else {
      val != 0
    }
  }
  pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
    if size == 0 {
      return;
    }
    unsafe {
      let layout = alloc::Layout::from_size_align_unchecked(size, align);
      alloc::dealloc(ptr, layout);
    }
  }
  
  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen::rt::run_ctors_once();
  }
  
  pub fn as_f64<T: AsF64>(t: T) -> f64 {
    t.as_f64()
  }

  pub trait AsF64 {
    fn as_f64(self) -> f64;
  }

  impl<'a, T: Copy + AsF64> AsF64 for &'a T {
    fn as_f64(self) -> f64 {
      (*self).as_f64()
    }
  }
  
  impl AsF64 for f64 {
    #[inline]
    fn as_f64(self) -> f64 {
      self as f64
    }
  }
  
  pub fn as_i64<T: AsI64>(t: T) -> i64 {
    t.as_i64()
  }

  pub trait AsI64 {
    fn as_i64(self) -> i64;
  }

  impl<'a, T: Copy + AsI64> AsI64 for &'a T {
    fn as_i64(self) -> i64 {
      (*self).as_i64()
    }
  }
  
  impl AsI64 for i64 {
    #[inline]
    fn as_i64(self) -> i64 {
      self as i64
    }
  }
  
  impl AsI64 for u64 {
    #[inline]
    fn as_i64(self) -> i64 {
      self as i64
    }
  }
  
  pub fn as_i32<T: AsI32>(t: T) -> i32 {
    t.as_i32()
  }

  pub trait AsI32 {
    fn as_i32(self) -> i32;
  }

  impl<'a, T: Copy + AsI32> AsI32 for &'a T {
    fn as_i32(self) -> i32 {
      (*self).as_i32()
    }
  }
  
  impl AsI32 for i32 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u32 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for i16 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u16 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for i8 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u8 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for char {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for usize {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  pub use alloc_crate::alloc;
  extern crate alloc as alloc_crate;
}

/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_val_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::local::val::types::__export_local_val_types_1_0_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::local::val::types);
  )
}
#[doc(inline)]
pub(crate) use __export_val_impl as export;

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.42.1:local:val@1.0.0:val:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 653] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x93\x04\x01A\x02\x01\
A\x06\x01B\x0b\x01r\x03\x04precy\x05scalez\x05values\x04\0\x07decimal\x03\0\0\x01\
r\x01\x1ananoseconds-since-midnightx\x04\0\x04time\x03\0\x02\x01p}\x01q\x0b\x04n\
ull\0\0\x04blob\x01\x04\0\x06boolen\x01\x7f\0\x03str\x01s\0\x05float\x01u\0\x03i\
nt\x01x\0\x07decimal\x01\x01\0\x04date\x01z\0\x08datetime\x01x\0\x04time\x01x\0\x05\
error\x01s\0\x04\0\x03val\x03\0\x05\x01o\x02s\x06\x01p\x07\x01@\0\0\x08\x04\0\x07\
get-map\x01\x09\x03\0\x15local:val/types@1.0.0\x05\0\x02\x03\0\0\x03val\x03\0\x03\
val\x03\0\x01\x01B\x0b\x01r\x03\x04precy\x05scalez\x05values\x04\0\x07decimal\x03\
\0\0\x01r\x01\x1ananoseconds-since-midnightx\x04\0\x04time\x03\0\x02\x01p}\x01q\x0b\
\x04null\0\0\x04blob\x01\x04\0\x06boolen\x01\x7f\0\x03str\x01s\0\x05float\x01u\0\
\x03int\x01x\0\x07decimal\x01\x01\0\x04date\x01z\0\x08datetime\x01x\0\x04time\x01\
x\0\x05error\x01s\0\x04\0\x03val\x03\0\x05\x01o\x02s\x06\x01p\x07\x01@\0\0\x08\x04\
\0\x07get-map\x01\x09\x04\0\x15local:val/types@1.0.0\x05\x03\x04\0\x13local:val/\
val@1.0.0\x04\0\x0b\x09\x01\0\x03val\x03\0\0\0G\x09producers\x01\x0cprocessed-by\
\x02\x0dwit-component\x070.230.0\x10wit-bindgen-rust\x060.42.1";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

